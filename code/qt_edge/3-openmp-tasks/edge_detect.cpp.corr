#include <limits.h>
#include <stdlib.h>

#include "edge_detect.h"

template <class F>
void stencil(uint8_t* gray_dst, const uint8_t* gray_img, const int width, const int height, const int edge_width, const int v_init, F const& f_operator)
{
	for (int y = 0; y < height; y++) {
		for (int x = 0; x < width; x++) {
			const int left = MAX(0, x - edge_width);
			const int right = MIN(width-1, x + edge_width);
			const int up = MAX(0, y - edge_width);
			const int down = MIN(height - 1, y + edge_width);

			// Find min and max!
			uint8_t local_v = v_init;
			for (int i = up; i <= down; i++) {
				for (int j = left; j <= right; j++) {
					const uint8_t pixel = gray_img[j+i*width];
					local_v = f_operator(local_v, pixel);
				}
			}
			gray_dst[x+y*width] = local_v;
		}
	}
}

void edge_detect(uint8_t* gray_dst, const uint8_t* gray_img, const int width, const int height, const int edge_width)
{
	uint8_t *img_erosion, *img_dilatation;
	posix_memalign((void**) &img_erosion, 16, width*height*sizeof(uint8_t));
	posix_memalign((void**) &img_dilatation, 16, width*height*sizeof(uint8_t));

#pragma omp parallel sections
	{

#pragma omp section 
		{
			stencil(img_erosion, gray_img, width, height, edge_width, UINT_MAX,
					[](const int a, const int b) { return MIN(a, b); });
		}

#pragma omp section
		{
			stencil(img_dilatation, gray_img, width, height, edge_width, 0,
					[](const int a, const int b) { return MAX(a, b); });
		}
	}

	for (int y = 0; y < height; y++) {
		for (int x = 0; x < width; x++) {
			gray_dst[x+y*width] = img_dilatation[x+y*width] - img_erosion[x+y*width];
		}
	}

	free(img_erosion);
	free(img_dilatation);
}
